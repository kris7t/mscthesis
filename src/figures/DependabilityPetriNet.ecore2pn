package hu.bme.mit.inf.petridse.example.dependability.ecore2pn

// Import the dependability metamodel with a qualified name.
import "http://example.org/dependability" as dependability
import hu.bme.mit.inf.petridse.example.dependability.queries.*

transformation DependabilityPetriNet {
	features {
		// Qualified references to classes from the metamodel.
		dependability::OccurrenceTrigger {
			^A@Description^(text="Occurrence rate of the fault.")
			param ^VoccurrenceRate^
		}

		dependability::UncertainPropagation {
			^A@Description^(text="Probability of fault propagation.")
			param ^Vprobability^
		}
	}

	// Create a placeholder for each state.
	// We do not refer to the modul instance here, so it can remain unnamed.
	mapping state(DepModel, Component, State) => StateModule

	// Instantiate states with initial marking.
	mapping initialState(DepModel, Component, State) => InitialStateModule IS {
		lookup state(DepModel, Component, State) as S
		S.^pp^ := IS.^Pp^
	}

	// Instantiate states without initial marking.
	mapping errorState(DepModel, Component, State) => ErrorStateModule ES {
		lookup state(DepModel, Component, State) as S
		S.^pp^ := ES.^Pp^
	}
	
	// Instantiate a module containing the hazard rate analysis queries.
	mapping port(DepModel, Component, Port) => PortModule

	// Each error mode is represented by a place.
	mapping errorMode(DepModel, Component, Port, ErrorMode) => ErrorModeModule EM {
		lookup port(DepModel, Component, Port) as P
		P.^verrorModes^ += EM.^VerrorModeOccurred^
	}	
	
	// Add the transition for output error modes.
	mapping outputErrorMode(DepModel, Component, Port, ErrorMode) => OutputErrorModeModule OutEM {
		lookup errorMode(DepModel, Component, Port, ErrorMode) as EM
		OutEM.^perror^ := EM.^Perror^
	}

	// Add the Petri net fragment for state transitions.
	mapping transition(DepModel, Component, Transition) => TransitionModule

	// Connect the state transitions to their source and target states.
	// We did not add connections in the (*@\lit{transition}@*) rule,
    // so that it can be looked up more easily, without pollution with more match arguments.
	mapping transitionFromTo(DepModel, Component, Transition, From, To) {
		lookup transition(DepModel, Component, Transition) as Tran
		lookup state(DepModel, Component, From) as SF
		lookup state(DepModel, Component, To) as ST
		Tran.^pfrom^ := SF.^pp^
		Tran.^pto^ := ST.^pp^
	}

	// Map occurrence triggers with their occurence rate parameter symbols.
	mapping transitionOccurrenceTrigger(DepModel, Component, Transition, Trigger) => OccurrenceTransitionModule OT {
		lookup transition(DepModel, Component, Transition) as Tran
		OT.^voccurrenceRate^ := Trigger.^VoccurrenceRate^
		Tran.^tfire^ := OT.^Tfire^
	}

	// Map propagated transitions.
	mapping transitionPropagatedTrigger(DepModel, Component, Transition, Port, ErrorMode) => PropagatedTransitionModule PT {
		lookup transition(DepModel, Component, Transition) as Tran
		lookup errorMode(DepModel, Component, Port, ErrorMode) as EM
		PT.^ptriggerError^ := EM.^Perror^
		Tran.^tfire^ := PT.^Tfire^
	}

	// Reuse the (*@\lit{CertainPropagationModule}@*) for output error mode propagation.
	mapping transitionPropagates(DepModel, Component, Transition, Port, ErrorMode) => CertainPropagationModule TP {
		lookup transition(DepModel, Component, Transition) as Tran
		lookup errorMode(DepModel, Component, Port, ErrorMode) as EM
		TP.^tfire^ := Tran.^tfire^
		TP.^perror^ := EM.^Perror^
	}

	// Add the error mode propagating fragment for certain connections.
	mapping connectedErrorModesCertain(DepModel, From, FromPort, To, ToPort, ErrorMode) => CertainPropagationModule P {
		lookup outputErrorMode(DepModel, From, FromPort, ErrorMode) as EMFrom
		lookup errorMode(DepModel, To, ToPort, ErrorMode) as EMTo
		P.^tfire^ := EMFrom.^ToutputToBuffer^
		P.^perror^ := EMTo.^perror^
	}

	// Add the error mode propagating fragment for uncertain connections.
	mapping connectedErrorModesUncertain(DepModel, From, FromPort, To, ToPort, Propagation, ErrorMode) => UncertainPropagationModule P {
		lookup outputErrorMode(DepModel, From, FromPort, ErrorMode) as EMFrom
		lookup errorMode(DepModel, To, ToPort, ErrorMode) as EMTo
		P.^toutputToBuffer^ := EMFrom.^ToutputToBuffer^
		P.^pto^ := EMTo.^perror^
		P.^vprobability^ := Propagation.^Vprobability^
	}
}


