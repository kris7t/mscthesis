package hu.bme.mit.inf.petridse.example.dependability.ecore2pn

import "http://example.org/dependability" as dependability
import hu.bme.mit.inf.petridse.example.dependability.queries.*

transformation DependabilityPetriNet {
	features {
		dependability::OccurrenceTrigger {
			@Description(text="Occurrence rate of the fault.")
			param ^VoccurrenceRate^
		}

		dependability::UncertainPropagation {
			@Description(text="Probability of fault propagation.")
			param ^Vprobability^
		}
	}

	mapping state(DepModel, Component, State) => StateModule

	mapping initialState(DepModel, Component, State) => InitialStateModule IS {
		lookup state(DepModel, Component, State) as S
		S.^pp^ := IS.^Pp^
	}

	mapping errorState(DepModel, Component, State) => ErrorStateModule ES {
		lookup state(DepModel, Component, State) as S
		S.^pp^ := ES.^Pp^
	}
	
	mapping port(DepModel, Component, Port) => PortModule

	mapping errorMode(DepModel, Component, Port, ErrorMode) => ErrorModeModule EM {
		lookup port(DepModel, Component, Port) as P
		P.^verrorModes^ += EM.^VerrorModeOccurred^
	}	
	
	mapping outputErrorMode(DepModel, Component, Port, ErrorMode) => OutputErrorModeModule OutEM {
		lookup errorMode(DepModel, Component, Port, ErrorMode) as EM
		OutEM.^perror^ := EM.^Perror^
	}

	mapping transition(DepModel, Component, Transition) => TransitionModule

	mapping transitionFromTo(DepModel, Component, Transition, From, To) {
		lookup transition(DepModel, Component, Transition) as Tran
		lookup state(DepModel, Component, From) as SF
		lookup state(DepModel, Component, To) as ST
		Tran.^pfrom^ := SF.^pp^
		Tran.^pto^ := ST.^pp^
	}

	mapping transitionOccurrenceTrigger(DepModel, Component, Transition, Trigger) => OccurrenceTransitionModule OT {
		lookup transition(DepModel, Component, Transition) as Tran
		OT.^voccurrenceRate^ := Trigger.^VoccurrenceRate^
		Tran.^tfire^ := OT.^Tfire^
	}

	mapping transitionPropagatedTrigger(DepModel, Component, Transition, Port, ErrorMode) => PropagatedTransitionModule PT {
		lookup transition(DepModel, Component, Transition) as Tran
		lookup errorMode(DepModel, Component, Port, ErrorMode) as EM
		PT.^ptriggerError^ := EM.^Perror^
		Tran.^tfire^ := PT.^Tfire^
	}

	mapping transitionPropagates(DepModel, Component, Transition, Port, ErrorMode) => CertainPropagationModule TP {
		lookup transition(DepModel, Component, Transition) as Tran
		lookup errorMode(DepModel, Component, Port, ErrorMode) as EM
		TP.^tfire^ := Tran.^tfire^
		TP.^perror^ := EM.^Perror^
	}

	mapping connectedErrorModesCertain(DepModel, From, FromPort, To, ToPort, ErrorMode) => CertainPropagationModule P {
		lookup outputErrorMode(DepModel, From, FromPort, ErrorMode) as EMFrom
		lookup errorMode(DepModel, To, ToPort, ErrorMode) as EMTo
		P.^tfire^ := EMFrom.^ToutputToBuffer^
		P.^perror^ := EMTo.^perror^
	}

	mapping connectedErrorModesUncertain(DepModel, From, FromPort, To, ToPort, Propagation, ErrorMode) => UncertainPropagationModule P {
		lookup outputErrorMode(DepModel, From, FromPort, ErrorMode) as EMFrom
		lookup errorMode(DepModel, To, ToPort, ErrorMode) as EMTo
		P.^toutputToBuffer% := EMFrom.^ToutputToBuffer^
		P.^pto^ := EMTo.^perror^
		P.^vprobability^ := Propagation.^Vprobability^
	}
}


